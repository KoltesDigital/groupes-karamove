load("@bazel_skylib//rules:copy_directory.bzl", "copy_directory")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:eslint/package_json.bzl", eslint_bin = "bin")
load("@npm//website:vite/package_json.bzl", vite_bin = "bin")
load("//:edition.bzl", "WITH_MUSIC")
load(":defs.bzl", "edition_expand_template", "type_check")

package(default_visibility = ["//visibility:public"])

npm_link_all_packages()

copy_file(
    name = "music",
    src = "//:music_ogg",
    out = "public/music.ogg",
)

copy_file(
    name = "data",
    src = "//:data",
    out = "public/data.json",
)

copy_directory(
    name = "music_segments",
    src = "//:music_segments",
    out = "public/music-segments",
)

edition_expand_template(
    name = "root_htaccess",
    out = "public/.htaccess",
    template = "root.htaccess.tmpl",
)

copy_file(
    name = "assets_htaccess",
    src = "assets.htaccess",
    out = "public/assets/.htaccess",
)

edition_expand_template(
    name = "vite_config",
    out = "vite.config.ts",
    template = "vite.config.ts.tmpl",
)

filegroup(
    name = "sources",
    srcs = glob([
        "src/**",
    ]) + [
        "index.html",
        ":assets_htaccess",
        ":data",
        ":node_modules/@types/d3",
        ":node_modules/@types/react",
        ":node_modules/@types/react-dom",
        ":node_modules/@vanilla-extract/css",
        ":node_modules/d3",
        ":node_modules/react",
        ":node_modules/react-dom",
        ":node_modules/react-router",
        ":root_htaccess",
    ] + ([
        ":music",
        ":music_segments",
    ] if WITH_MUSIC else []),
)

filegroup(
    name = "configuration",
    srcs = glob([
        "tsconfig.*",
    ]) + [
        ":node_modules/@types/node",
        ":node_modules/@vanilla-extract/vite-plugin",
        ":node_modules/@vitejs/plugin-react-swc",
        ":node_modules/vite",
        ":vite_config",
    ],
)

filegroup(
    name = "files",
    srcs = glob([
        "tsconfig.*",
    ]) + [
        "package.json",
        ":configuration",
        ":sources",
    ],
)

write_file(
    name = "chdir",
    out = "chdir.cjs",
    content = [
        "process.chdir(require('path').join(process.cwd(), '../../..'));",
    ],
)

vite_bin.vite_binary(
    name = "dev",
    args = [
        "--node_options=--require=./$(rootpath :chdir)",
    ],
    data = [
        ":chdir",
        ":files",
    ],
)

vite_bin.vite(
    name = "build",
    srcs = [
        ":files",
    ],
    args = [
        "build",
    ],
    chdir = package_name(),
    out_dirs = ["dist"],
)

vite_bin.vite_binary(
    name = "preview",
    args = [
        "preview",
        "--outDir",
        "$(rootpath :build)",
    ],
    data = [":build"],
)

type_check(
    name = "app",
    srcs = [
        ":node_modules/vite",
        ":sources",
    ],
    tsconfig = "tsconfig.app.json",
)

type_check(
    name = "node",
    srcs = [
        ":configuration",
    ],
    tsconfig = "tsconfig.node.json",
)

eslint_bin.eslint_test(
    name = "eslint",
    chdir = package_name(),
    data = [
        "eslint.config.mjs",
        ":files",
        ":node_modules/eslint-plugin-sort-keys-fix",
        "//:node_modules/@eslint/js",
        "//:node_modules/eslint-plugin-react-hooks",
        "//:node_modules/eslint-plugin-react-refresh",
        "//:node_modules/globals",
        "//:node_modules/typescript-eslint",
    ],
)
